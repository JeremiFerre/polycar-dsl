/*
 * generated by Xtext 2.14.0
 */
grammar InternalPolycar;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.unice.polytech.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.unice.polytech.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.unice.polytech.dsl.services.PolycarGrammarAccess;

}

@parser::members {

 	private PolycarGrammarAccess grammarAccess;

    public InternalPolycarParser(TokenStream input, PolycarGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Car";
   	}

   	@Override
   	protected PolycarGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCar
entryRuleCar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCarRule()); }
	iv_ruleCar=ruleCar
	{ $current=$iv_ruleCar.current; }
	EOF;

// Rule Car
ruleCar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCarAccess().getCarAction_0(),
					$current);
			}
		)
		otherlv_1='Car'
		{
			newLeafNode(otherlv_1, grammarAccess.getCarAccess().getCarKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCarAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCarRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.unice.polytech.dsl.Polycar.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='actions'
		{
			newLeafNode(otherlv_3, grammarAccess.getCarAccess().getActionsKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getCarAccess().getColonKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCarAccess().getActionsActionParserRuleCall_5_0());
				}
				lv_actions_5_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCarRule());
					}
					add(
						$current,
						"actions",
						lv_actions_5_0,
						"fr.unice.polytech.dsl.Polycar.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCarAccess().getActionsActionParserRuleCall_6_0());
				}
				lv_actions_6_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCarRule());
					}
					add(
						$current,
						"actions",
						lv_actions_6_0,
						"fr.unice.polytech.dsl.Polycar.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='environments'
		{
			newLeafNode(otherlv_7, grammarAccess.getCarAccess().getEnvironmentsKeyword_7());
		}
		otherlv_8=':'
		{
			newLeafNode(otherlv_8, grammarAccess.getCarAccess().getColonKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCarAccess().getConditionsConditionParserRuleCall_9_0());
				}
				lv_conditions_9_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCarRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_9_0,
						"fr.unice.polytech.dsl.Polycar.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCarAccess().getConditionsConditionParserRuleCall_10_0());
				}
				lv_conditions_10_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCarRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_10_0,
						"fr.unice.polytech.dsl.Polycar.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_11='RUN'
		{
			newLeafNode(otherlv_11, grammarAccess.getCarAccess().getRUNKeyword_11());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCarRule());
					}
				}
				otherlv_12=RULE_ID
				{
					newLeafNode(otherlv_12, grammarAccess.getCarAccess().getDefaultActionActionCrossReference_12_0());
				}
			)
		)?
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConditionAccess().getConditionAction_0(),
					$current);
			}
		)
		(
			otherlv_1='-'
			{
				newLeafNode(otherlv_1, grammarAccess.getConditionAccess().getHyphenMinusKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getEnvironmentEventsEnvironmentEventParserRuleCall_1_1_0());
					}
					lv_environmentEvents_2_0=ruleEnvironmentEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						add(
							$current,
							"environmentEvents",
							lv_environmentEvents_2_0,
							"fr.unice.polytech.dsl.Polycar.EnvironmentEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_3='and'
			{
				newLeafNode(otherlv_3, grammarAccess.getConditionAccess().getAndKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getEnvironmentEventsEnvironmentEventParserRuleCall_2_1_0());
					}
					lv_environmentEvents_4_0=ruleEnvironmentEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						add(
							$current,
							"environmentEvents",
							lv_environmentEvents_4_0,
							"fr.unice.polytech.dsl.Polycar.EnvironmentEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='->'
		{
			newLeafNode(otherlv_5, grammarAccess.getConditionAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getConditionAccess().getActionActionCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getActionAccess().getActionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.unice.polytech.dsl.Polycar.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getActionAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getSubActionsSubActionParserRuleCall_3_0());
				}
				lv_subActions_3_0=ruleSubAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					add(
						$current,
						"subActions",
						lv_subActions_3_0,
						"fr.unice.polytech.dsl.Polycar.SubAction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getSubActionsSubActionParserRuleCall_4_0());
				}
				lv_subActions_4_0=ruleSubAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					add(
						$current,
						"subActions",
						lv_subActions_4_0,
						"fr.unice.polytech.dsl.Polycar.SubAction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleEnvironmentEvent
entryRuleEnvironmentEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnvironmentEventRule()); }
	iv_ruleEnvironmentEvent=ruleEnvironmentEvent
	{ $current=$iv_ruleEnvironmentEvent.current; }
	EOF;

// Rule EnvironmentEvent
ruleEnvironmentEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEnvironmentEventAccess().getEnvironmentEventAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEnvironmentEventAccess().getTypeEventTypeEnumRuleCall_1_0());
				}
				lv_type_1_0=ruleEventType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnvironmentEventRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"fr.unice.polytech.dsl.Polycar.EventType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSubAction
entryRuleSubAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubActionRule()); }
	iv_ruleSubAction=ruleSubAction
	{ $current=$iv_ruleSubAction.current; }
	EOF;

// Rule SubAction
ruleSubAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSubActionAccess().getSubActionAction_0(),
					$current);
			}
		)
		(
			otherlv_1='-'
			{
				newLeafNode(otherlv_1, grammarAccess.getSubActionAccess().getHyphenMinusKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSubActionAccess().getTypeActionTypeEnumRuleCall_1_1_0());
					}
					lv_type_2_0=ruleActionType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubActionRule());
						}
						set(
							$current,
							"type",
							lv_type_2_0,
							"fr.unice.polytech.dsl.Polycar.ActionType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='is'
			{
				newLeafNode(otherlv_3, grammarAccess.getSubActionAccess().getIsKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSubActionAccess().getValueEIntParserRuleCall_1_3_0());
					}
					lv_value_4_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubActionRule());
						}
						set(
							$current,
							"value",
							lv_value_4_0,
							"fr.unice.polytech.dsl.Polycar.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5='during'
				{
					newLeafNode(otherlv_5, grammarAccess.getSubActionAccess().getDuringKeyword_1_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSubActionAccess().getDurationEIntParserRuleCall_1_4_1_0());
						}
						lv_duration_6_0=ruleEInt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSubActionRule());
							}
							set(
								$current,
								"duration",
								lv_duration_6_0,
								"fr.unice.polytech.dsl.Polycar.EInt");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Rule EventType
ruleEventType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='FORB_FORWARD'
			{
				$current = grammarAccess.getEventTypeAccess().getFORB_FORWARDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEventTypeAccess().getFORB_FORWARDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='FORB_LEFT'
			{
				$current = grammarAccess.getEventTypeAccess().getFORB_LEFTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEventTypeAccess().getFORB_LEFTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='FORB_RIGHT'
			{
				$current = grammarAccess.getEventTypeAccess().getFORB_RIGHTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getEventTypeAccess().getFORB_RIGHTEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='OFF_ROAD_LEFT'
			{
				$current = grammarAccess.getEventTypeAccess().getOFF_ROAD_LEFTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getEventTypeAccess().getOFF_ROAD_LEFTEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='OFF_ROAD_RIGHT'
			{
				$current = grammarAccess.getEventTypeAccess().getOFF_ROAD_RIGHTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getEventTypeAccess().getOFF_ROAD_RIGHTEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='TRAFFIC_LIGHT_OFF'
			{
				$current = grammarAccess.getEventTypeAccess().getTRAFFIC_LIGHT_OFFEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getEventTypeAccess().getTRAFFIC_LIGHT_OFFEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='TRAFFIC_LIGHT_ON'
			{
				$current = grammarAccess.getEventTypeAccess().getTRAFFIC_LIGHT_ONEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getEventTypeAccess().getTRAFFIC_LIGHT_ONEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='OBJECT_LEFT'
			{
				$current = grammarAccess.getEventTypeAccess().getOBJECT_LEFTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getEventTypeAccess().getOBJECT_LEFTEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='OBJECT_RIGHT'
			{
				$current = grammarAccess.getEventTypeAccess().getOBJECT_RIGHTEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getEventTypeAccess().getOBJECT_RIGHTEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='OBJECT_MIDDLE'
			{
				$current = grammarAccess.getEventTypeAccess().getOBJECT_MIDDLEEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getEventTypeAccess().getOBJECT_MIDDLEEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='CAN_GO_LEFT'
			{
				$current = grammarAccess.getEventTypeAccess().getCAN_GO_LEFTEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getEventTypeAccess().getCAN_GO_LEFTEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='CAN_GO_RIGHT'
			{
				$current = grammarAccess.getEventTypeAccess().getCAN_GO_RIGHTEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getEventTypeAccess().getCAN_GO_RIGHTEnumLiteralDeclaration_11());
			}
		)
	)
;

// Rule ActionType
ruleActionType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='MOTOR_LEFT'
			{
				$current = grammarAccess.getActionTypeAccess().getMOTOR_LEFTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getActionTypeAccess().getMOTOR_LEFTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='MOTOR_RIGHT'
			{
				$current = grammarAccess.getActionTypeAccess().getMOTOR_RIGHTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getActionTypeAccess().getMOTOR_RIGHTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='SPEED'
			{
				$current = grammarAccess.getActionTypeAccess().getSPEEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getActionTypeAccess().getSPEEDEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
