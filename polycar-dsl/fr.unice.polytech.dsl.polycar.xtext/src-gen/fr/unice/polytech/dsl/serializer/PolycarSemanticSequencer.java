/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.dsl.serializer;

import com.google.inject.Inject;
import fr.unice.polytech.dsl.polycar.Car;
import fr.unice.polytech.dsl.polycar.EnvironmentEvent;
import fr.unice.polytech.dsl.polycar.PolycarPackage;
import fr.unice.polytech.dsl.polycar.SubAction;
import fr.unice.polytech.dsl.services.PolycarGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class PolycarSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PolycarGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PolycarPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PolycarPackage.ACTION:
				sequence_Action(context, (fr.unice.polytech.dsl.polycar.Action) semanticObject); 
				return; 
			case PolycarPackage.CAR:
				sequence_Car(context, (Car) semanticObject); 
				return; 
			case PolycarPackage.ENVIRONMENT_EVENT:
				sequence_EnvironmentEvent(context, (EnvironmentEvent) semanticObject); 
				return; 
			case PolycarPackage.SUB_ACTION:
				sequence_SubAction(context, (SubAction) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (name=EString subActions+=SubAction subActions+=SubAction*)
	 */
	protected void sequence_Action(ISerializationContext context, fr.unice.polytech.dsl.polycar.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Car returns Car
	 *
	 * Constraint:
	 *     (name=EString actions+=Action actions+=Action* environmentEvents+=EnvironmentEvent environmentEvents+=EnvironmentEvent*)
	 */
	protected void sequence_Car(ISerializationContext context, Car semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnvironmentEvent returns EnvironmentEvent
	 *
	 * Constraint:
	 *     (type=EventType action=[Action|EString])
	 */
	protected void sequence_EnvironmentEvent(ISerializationContext context, EnvironmentEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PolycarPackage.Literals.ENVIRONMENT_EVENT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PolycarPackage.Literals.ENVIRONMENT_EVENT__TYPE));
			if (transientValues.isValueTransient(semanticObject, PolycarPackage.Literals.ENVIRONMENT_EVENT__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PolycarPackage.Literals.ENVIRONMENT_EVENT__ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvironmentEventAccess().getTypeEventTypeEnumRuleCall_1_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getEnvironmentEventAccess().getActionActionEStringParserRuleCall_1_3_0_1(), semanticObject.eGet(PolycarPackage.Literals.ENVIRONMENT_EVENT__ACTION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SubAction returns SubAction
	 *
	 * Constraint:
	 *     (type=ActionType value=EInt duration=EInt?)
	 */
	protected void sequence_SubAction(ISerializationContext context, SubAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
